/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nwindow.addEventListener('DOMContentLoaded', checkName);\nvar POINTS_HELP_ALL_WORD = 5;\nvar POINTS_HELP_DEFINITION = 1;\nvar modulLevel = document.querySelector('.modul-level');\nvar gameField = document.querySelector('.game-field');\nvar gameVersionField = document.querySelector('.game-version-field');\nvar gameResultField = document.querySelector('.game-result-field');\nvar currentResponseArray = [];\nvar arrayCurrentEvents = [];\nvar currentLevel;\nvar lvls = [];\nvar isComplete = false;\nvar REQUEST_URL = './data';\nvar levelsButton = document.querySelectorAll('.level');\n\nvar _loop = function _loop(i) {\n  levelsButton[i].addEventListener('change', function (evt) {\n    var _this = this;\n\n    (function () {\n      modulLevel.classList.add('hidden');\n    })();\n\n    currentLevel = i + 1;\n    fetch(\"\".concat(REQUEST_URL, \"/\").concat(i, \".json\")).then(function (response) {\n      if (response.ok) {\n        response.json().then(function (result) {\n          _this.questWord = result.word;\n          _this.arrayNewWords = result.newWord;\n          var buttons = [];\n\n          for (var _i4 = 0; _i4 < _this.questWord.length; _i4++) {\n            buttons[_i4] = document.createElement('input');\n            buttons[_i4].type = 'submit';\n            buttons[_i4].value = _this.questWord[_i4];\n            buttons[_i4].textContent = _this.questWord[_i4];\n            gameField.appendChild(buttons[_i4]);\n          }\n\n          ;\n          currentResponseArray = evt.target.arrayNewWords;\n          console.log(\"\\u0417\\u0430\\u0434\\u0430\\u043D \\u0442\\u0435\\u043A\\u0443\\u0449\\u0438\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u043E\\u0442\\u0432\\u0435\\u0442\\u043E\\u0432 - \".concat(currentResponseArray));\n          dataUpdating();\n          staticticsUpdating();\n        });\n      }\n    });\n  });\n};\n\nfor (var i = 0; i < levelsButton.length; i++) {\n  _loop(i);\n}\n\ngameField.addEventListener('click', function (evt) {\n  if (evt.target.value != undefined) {\n    gameVersionField.textContent += evt.target.value;\n    evt.target.disabled = true;\n    window.currentEvent = evt.target;\n    arrayCurrentEvents.push(window.currentEvent);\n  }\n\n  if (checkIt(gameVersionField.textContent)) {\n    var str = gameVersionField.textContent;\n    getResult(str);\n    getPoints(str);\n    isVictory();\n    eraseAll();\n    count();\n  }\n});\n\nfunction isVictory() {\n  if (currentResponseArray.length == 0) {\n    alert('Поздравляем! Все слова на этом уровне отгаданы!'); // тут нужно сделать попап \n\n    isComplete = true;\n  }\n}\n\nvar buttonEraseLetter = document.querySelector('.erase-letter');\nbuttonEraseLetter.addEventListener('click', eraseLetter);\nvar buttonEraseAll = document.querySelector('.erase-all');\nbuttonEraseAll.addEventListener('click', eraseAll);\nvar buttonHelpDefinition = document.querySelector('.help-definition');\nbuttonHelpDefinition.addEventListener('click', getHelpDefinition);\nvar buttonHelpAllWord = document.querySelector('.help-all-word');\nbuttonHelpAllWord.addEventListener('click', getHelpAllWord); // функция удаляет последнюю букву из поля ввода и снимает с соответствующей кнопки-буквы свойство disabled\n\nfunction eraseLetter() {\n  gameVersionField.textContent = gameVersionField.textContent.slice(0, -1);\n  notDisabledOne();\n} //функция отменяет свойство disabled у последней кнопки-буквы\n\n\nfunction notDisabledOne() {\n  if (arrayCurrentEvents.length - 1 >= 0) {\n    arrayCurrentEvents[arrayCurrentEvents.length - 1].disabled = false;\n    arrayCurrentEvents.splice(-1);\n  }\n} //функция обнуляет поле ввода и снимает со всех кнопок-букв свойство disabled\n\n\nfunction eraseAll() {\n  gameVersionField.textContent = '';\n  notDisabledAll();\n} //функция отменяет свойство disabled у всех кнопок-букв\n\n\nfunction notDisabledAll() {\n  for (var _i = 0; _i < arrayCurrentEvents.length; _i++) {\n    arrayCurrentEvents[_i].disabled = false;\n  }\n\n  arrayCurrentEvents = [];\n} // функция проверяет существование введенного слова\n\n\nfunction checkIt(str) {\n  for (var _i2 = 0; _i2 < currentResponseArray.length; _i2++) {\n    if (str.toLowerCase() == currentResponseArray[_i2]) {\n      currentResponseArray.splice(_i2--, 1);\n      return true;\n    }\n  }\n} // функция отправляет слово в поле правильных ответов\n\n\nfunction getResult(string) {\n  gameResultField.textContent += ' ' + string.toUpperCase();\n}\n\nfunction getDefinition(key) {\n  fetch('./data/vocabulary.json').then(function (response) {\n    if (response.ok) {\n      response.json().then(function (result) {\n        alert(result[key]);\n      });\n    } else {\n      alert('Что-то пошло не так...');\n    }\n  });\n} // функция вызова подсказки: показать слово\n\n\nfunction getHelpAllWord() {\n  if (scoringPoints(POINTS_HELP_ALL_WORD)) {\n    getResult(getRandomElement(currentResponseArray));\n    isVictory();\n    statistics.helpCount++;\n    count();\n  }\n} // функция вызова подсказки: показать определение\n\n\nfunction getHelpDefinition() {\n  if (scoringPoints(POINTS_HELP_DEFINITION)) {\n    getDefinition(currentResponseArray[getRandom(currentResponseArray)]);\n    statistics.helpCount++;\n    statistics.answerCount--;\n    count();\n  }\n} // функция cоздает рандомный индекс\n\n\nfunction getRandom(array) {\n  var index = Math.floor(Math.random() * (array.length - 1 - 0 + 1));\n  return index;\n} // функция достает рандомный элемент из массива слов\n\n\nfunction getRandomElement(array) {\n  var index = getRandom(array);\n  var currentElement = array[index];\n  array.splice(index, 1);\n  return currentElement;\n} // функция проверяет достаточность очков, и списывает их\n\n\nfunction scoringPoints(num) {\n  if (statistics.points < num) {\n    alert('У Вас недостаточно очков');\n    return false;\n  } else {\n    statistics.points -= num;\n    return true;\n  }\n} // функция начисляет очки за отгаданное слово\n\n\nfunction getPoints(str) {\n  statistics.points += str.length;\n} // функция создает объект и заполняет его данными уровня\n\n\nvar Level = function Level() {\n  _classCallCheck(this, Level);\n\n  this.answerCount = statistics.answerCount;\n  this.currentResponseArray = currentResponseArray;\n  this.helpCount = statistics.helpCount;\n  this.points = statistics.points;\n  this.answers = gameResultField.textContent;\n  this.isComplete = isComplete;\n}; //______поле статистики_______\n\n\nvar statistics = {};\nvar countAnswerWord = document.querySelector('.count-answer-word');\nvar questWord = document.querySelector('.count-quest-word');\nvar countHelp = document.querySelector('.count-help');\nvar points = document.querySelector('.points'); //функция обновления статистической информации\n\nfunction count() {\n  statistics.answerCount++;\n  staticticsUpdating();\n  saveData();\n}\n\n; // ___________________________________________\n\nvar player = document.querySelector('.player');\nvar modulSign = document.querySelector('.modul-sign');\nvar overlay = document.querySelector('.modul-overlay');\n\nfunction checkName() {\n  checkLvlOnClose();\n\n  if (!localStorage.userName) {\n    modulSign.classList.remove('modul-sign-hide');\n    overlay.classList.remove('modul-overlay-hide');\n    var button = document.querySelector('.buttonSend');\n    button.addEventListener('click', getNewUser);\n  } else {\n    player.textContent = localStorage.userName;\n  }\n} //функция создает в локал сторадж имя нового пользователя и передает его имя в строку с именем игрока\n\n\nfunction getNewUser(evt) {\n  evt.preventDefault();\n  location.reload();\n  var userName = document.querySelector('#inputname').value;\n  localStorage.setItem('userName', userName);\n  player.textContent = localStorage.userName;\n  modulSign.classList.add('modul-sign-hide');\n  overlay.classList.add('modul-overlay-hide');\n}\n\nvar changePlayerButton = document.querySelector('.change-player-button');\nchangePlayerButton.addEventListener('click', function (evt) {\n  evt.preventDefault();\n  var question = confirm('Прогресс игры буде потерян. Вы уверены, что хотите сменить игрока?');\n\n  if (question) {\n    localStorage.clear();\n    checkName();\n  }\n}); // функция сохраняет данные в localStorage\n\nfunction saveData() {\n  lvls[currentLevel - 1] = new Level();\n  localStorage.setItem(\"level\".concat(currentLevel), JSON.stringify(lvls[currentLevel - 1]));\n} // функция обновляет данные из localStorage\n\n\nfunction dataUpdating() {\n  var level = {};\n\n  if (localStorage[\"level\".concat(currentLevel)]) {\n    level = JSON.parse(localStorage[\"level\".concat(currentLevel)]);\n  }\n\n  statistics.answerCount = +level.answerCount || 0;\n  currentResponseArray = level.currentResponseArray || currentResponseArray;\n  statistics.helpCount = +level.helpCount || 0;\n  statistics.points = +level.points || 0;\n  gameResultField.textContent = level.answers || '';\n} // функция обновляет выведенные статистический данные\n\n\nfunction staticticsUpdating() {\n  countAnswerWord.textContent = statistics.answerCount;\n  questWord.textContent = currentResponseArray.length;\n  countHelp.textContent = statistics.helpCount;\n  points.textContent = statistics.points;\n}\n\nfunction checkLvlOnClose() {\n  var count = 0;\n\n  for (var _i3 = 1; _i3 <= levelsButton.length; _i3++) {\n    if (localStorage[\"level\".concat(_i3)]) {\n      if (JSON.parse(localStorage[\"level\".concat(_i3)]).isComplete) {\n        count++;\n        levelsButton[count].disabled = false;\n      }\n    }\n  }\n\n  levelsButton[count + 1].disabled = false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/index.js\n");

/***/ })

/******/ });